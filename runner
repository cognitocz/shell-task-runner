#!/bin/sh
#
# Shell Task Runner

set -e

_header()(
    name="$(basename "$(cd "$(dirname "$0")"; pwd -P)")"
    printf "%s\\nUsage %s [task] [task_options]\\n\\n" "$(_ansi --underline "Application $(_ansi --bold --yellow "$name")")" "$0"
)

_doc_comment()(
    func="$1"
    re_comment='(^|\r)[\t ]*((#|:)+ ?([^\r]*))'
    re_func='(^|\r)?[\t ]*'$func'[\t ]*\([\t ]*\)[^\{\(]*[\{\(][^\r]*\s*'
    code="$(cat "$0" | tr -d '\r' | tr '\n' '\r')"
    for pattern in "(${re_comment})+${re_func}" "${re_func}(${re_comment})+"; do
        comment="$(printf "%s" "$code" | awk 'match($0, /'"$pattern"'/) {print substr($0, RSTART, RLENGTH)}' | sed -E 's/'"$re_func"'//g;s/'"$re_comment"'/\4\r/g' | tr '\r' '\n')"
        if [ -n "$comment" ]; then
            printf '%s' "$comment"
            break
        fi
    done
)

_doc_title()(
    title="$(_doc_comment "$1" | sed -n '/./{p;q;}')"
    if [ -z "$title" ]; then
        title="$(cat "$0" | grep -E '^[\t ]*'"$1"'[\t ]*\([\t ]*\)[\t \{\(]*#'| sed -r 's/^[^#]+#+[\t ]*(.*)/\1/')"
    fi

    printf '%s' "$title"
)

_tasks()(
    _ansi --bold --yellow --nl "Tasks:"
    pattern='^\s*task_([a-zA-Z_][a-zA-Z0-9_]*)\s*\(\s*\).*'
    grep -E "$pattern" "$0" | sort | while IFS= read -r line; do
        command="$(printf '%s' "$line" | sed -E "s/$pattern/\\1/")"
        printf '%s%s\n' "$(_ansi --cyan --format '%-15s' "$command")" "$(_doc_title "task_$command")"
    done
)

_shell_escape()(
    printf '%s' "$1" | sed -e 's/\(["\& '"'"']\)/\\\1/g'
)

_quote(){
    printf '%s' "$1" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/"
}

_printf_escape()(
    printf "%s" "$1" | sed "s/%/%%/g"
)

_ansifilter()(
    printf "%s" "$1" | sed -r 's/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g'
)

_stty()(
    sleep 0.1 # Fix tty delay for docker run -t ...
    stty "$@" 2>/dev/null
)

_color()(
    case "$1" in
        black) echo 0;;
        red) echo 1;;
        green) echo 2;;
        yellow) echo 3;;
        blue) echo 4;;
        magenta|purple) echo 5;;
        cyan) echo 6;;
        white) echo 7;;
    esac
)

_ansi()(
    text='' start='' stop="" newline='' format="%s"
    while [ -n "$1" ]; do
        case "$1" in
            --nl|--new-line) newline="\\n";;
            --bold) start="$start\\033[1m" stop="\\033[22m$stop";;
            --italic) start="$start\\033[3m" stop="\\033[23m$stop";;
            --format=*) format="${1#*=}";;
            -f|--format) shift; format="$1";;
            --underline) start="$start\\033[4m" stop="\\033[24m$stop";;
            --inverse) start="$start\\033[7m";;
            --reset) start="$start\\033[0m";;
            --bg-bright-*) start="$start\\033[10$(_color "${1##*-}")m" stop="\\033[49m$stop";;
            --bg-*-intense) start="$start\\033[10$(_color "$(echo "$1" | cut -d- -f4)")m" stop="\\033[49m$stop";;
            --bg-*) start="$start\\033[4$(_color "${1##*-}")m" stop="\\033[49m$stop";;
            --bright-gray) start="$start\\033[37m" stop="\\033[39m$stop";;
            --bright-*) start="$start\\033[9$(_color "${1##*-}")m" stop="\\033[39m$stop";;
            --gray) start="$start\\033[90m" stop="\\033[39m$stop";;
            --*-intense) start="$start\\033[9$(_color "$(echo "$1" | cut -d- -f3)")m" stop="\\033[39m$stop";;
            --*) start="$start\\033[3$(_color "${1##*-}")m" stop="\\033[39m$stop";;
            *) text="$text $(_quote "$1")";;
        esac
        shift
    done

    eval set -- "$text"
    printf "${start}${format}${stop}${newline}" "$@"
)

_align()(
    for text in "$@"; do true; done
    rawtext="$(_ansifilter "$text")"
    width=$(( $(_stty size | cut -d' ' -f2) + ${#text} - ${#rawtext} ))
    left_span=$(( (width + ${#text}) / 2 ))
    right_span=$(( width - left_span ))
    case "$1" in
        --right) printf "%${width}s\\n" "$text";;
        --center) printf "%${left_span}s%${right_span}s\\n" "$text";;
        *) printf "%s" "$text";;
    esac
)

_box()(
    text=""; options=""; newline=""; padding=1; margin=0
    while [ -n "$1" ]; do
        case "$1" in
            --p=*|--padding=*) padding="${1#*=}";;
            -p|--padding) shift; padding="$1";;
            --m=*|--margin=*) margin="${1#*=}";;
            -m|--margin) shift; margin="$1";;
            --nl|--new-line) newline=1;;
            --*) options="$options $1";;
            *) text="$text$1";;
        esac
        shift
    done

    mspace=$([ "$margin" -gt 0 ] && printf "   %.0s" $(seq 1 "$margin") || echo "")
    pspace=$([ "$padding" -gt 0 ] && printf "   %.0s" $(seq 1 "$padding") || echo "")
    width=$(( $(_stty size | cut -d' ' -f2) - 2 * ${#mspace} ))
    textwidth=$(( width - 2 * ${#pspace} ))

    for _ in $(seq 1 "$margin"); do echo ""; done
    for _ in $(seq 1 "$padding"); do echo "$mspace$(_ansi $options --nl --format="%${width}s")"; done

    esc="$(printf '\033')"
    printf "$(_printf_escape "$text\\n ")" | while IFS= read -r part; do
        length=0; line=''; state=0
        printf '%s\n' "$part" | sed 's/\(.\)/\1\n/g' | {
            LANG=C; LC_ALL=C
            while IFS= read -r char; do
                line="$line$char"
                if [ "$esc" = "$char" ]; then state=1; fi
                if [ "$state" -eq 0 ]; then
                    if [ "${#char}" -ge 4 ]; then step=2; else step=1; fi
                    length=$(( length + step ));
                fi
                if [ "$state" -eq 1 ] && [ "m" = "$char" ]; then state=0; fi
                if [ "$length" -eq "$textwidth" ]; then
                    printf '%s\n' "$mspace$(_ansi $options --format="$pspace%s%$(( textwidth - length ))s$pspace" "$line")"
                    length=0; line='';
                fi
            done
            if [ "$length" -gt 0 ]; then
                printf '%s\n' "$mspace$(_ansi $options --format="$pspace%s%$(( textwidth - length + 1 ))s$pspace" "$line")"
            fi
            length=0; line=''
        }
    done

    for _ in $(seq 1 "$padding"); do printf '%s\n' "$mspace$(_ansi $options --nl --format="%${width}s")"; done
    for _ in $(seq 1 "$margin"); do echo ""; done
    [ -n "$newline" ] && echo ""
)

_log()(
    color="gray"
    case $1 in
        --error) color="red"; shift;;
        --warning) color="yellow"; shift;;
        --success) color="green"; shift;;
        --info) color="cyan"; shift;;
        --*) shift;;
    esac

    printf "[%s] %s\\n" "$(_ansi "--${color}" "$(date -Iseconds)")" "$@"
)

_docker_run()(
    if [ -t 0 ]; then tty="-t"; fi
    docker run --rm -i $tty -v "$(pwd)":"$(pwd)" -w "$(pwd)" -e USER_ID="$(id -u)" -e GROUP_ID="$(id -g)" "$@"
)

_dotenv()(
    config=""

    touch .env.dist .env
    while read -r line; do
        if [ "$(printf "%s" "$line" | head -c1)" = '#' ]; then
            help=$(printf "%s" "$line" | cut -c2- | xargs)
            config="$config$line\\n"
            continue
        fi

        if test "${line#*=}" = "$line"; then
            config="$config$line\\n"
            continue
        fi

        key="$(printf "%s" "$line" | cut -d= -f1)"
        value="$(printf "%s" "$line" | cut -d= -f2-)"
        default="$(eval printf "%s" "$value")"
        value="$default"
        if [ "$1" = '-f' ] || [ "$1" = '--force' ] || ! grep "^${key}=" .env > /dev/null; then
            [ -n "$help" ] && _ansi --white --nl "  $help"
            printf "%s (%s): $(test -t 1 && printf "\\n")" "$(_ansi --cyan "  $key")" "$(_ansi --yellow "$default")"
            if [ -t 1 ] && read -r value </dev/tty && [ "$value" = "" ]; then
                value="$default"
            fi
            value="$(_shell_escape "$value")"
        else
            value="$(grep "^${key}=" .env | cut -d= -f2-)"
        fi
        config="$config$key=$value\\n"
        help=""
    done < .env.dist
    printf "$(_printf_escape "$config")" > .env
)

_run()(
    _ansi --reset
    if [ -z "$1" ] || [ "$1" = '-h' ] || [ "$1" = '--help' ]; then
        _header
        printf "%s\\n  %-25s%s\\n\\n" "$(_ansi --cyan "Options:")" "$(_ansi --green "-h, --help")" "Print this message and exit"
        _tasks
    elif [ -n "$(command -v "task_$1")" ]; then
        command="task_$1"
    elif [ -n "$(command -v "$1")" ]; then
        command="$1"
    elif [ -z "$command" ]; then
        _header
        _box --bg-red --white --nl "Task $(_ansi --bold "$1") doesn't exist." >&2 && _tasks >&1 && exit 1
    fi

    if [ "$#" -gt 0 ]; then
        shift
        "$command" "$@"
    fi
)

if [ ! "$(grep -E "^\\s*_run(\\s+|$)" "$0" | grep -Ev "_run\\s*\\(")" ]; then
    _run "$@"
fi
